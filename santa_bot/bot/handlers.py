from telegram import (InlineKeyboardButton, InlineKeyboardMarkup,
                      InputMediaPhoto, KeyboardButton, ReplyKeyboardMarkup,
                      Update)
from telegram.ext import CallbackContext

INFORMATION_TEXT, INFORMATION_TEXT_2, BUTTON_HANDLING, CREATE_GROUP, DESCRIPTION_GROUP, CHOOSE_DATE, CHOSEN_GROUP = range(7)


CREATE_GROUP_BTN_TXT, ADMIN_BTN_TXT, MY_GROUPS_BTN_TXT = [
    "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã", "–£–ø—Ä–∞–≤–ª—è—Ç—å –≥—Ä—É–ø–ø–∞–º–∏", "–ú–æ–∏ –≥—Ä—É–ø–ø—ã"
]

def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–Ø –≥–æ—Ç–æ–≤!", callback_data="next_info")],

    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        # update.message.photo()
        update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-–ø–æ–≤–µ–ª–∏—Ç–µ–ª—å –¢–∞–π–Ω—ã—Ö –°–∞–Ω—Ç. –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω–∞ —Å–≤–µ—Ç–µ —è –ª—é–±–ª—é –¥—Ä—É–∑–µ–π –∏ –ø–æ–¥–∞—Ä–∫–∏ üéÅ")
        update.message.reply_text(
            "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É —Å –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ —Å–µ–º—å–µ–π üë®‚Äçüë©‚Äçüëß‚Äçüë¶, –Ω–∞ —Ä–∞–±–æ—Ç–µ üë©‚Äç‚úàÔ∏è–∏–ª–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ üßò, –≤–µ–∑–¥–µ, –≥–¥–µ –µ—Å—Ç—å –¥–æ—Ä–æ–≥–∏–µ —Ç–µ–±–µ –ª—é–¥–∏, —Å –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ä–∞–¥–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–π —Å—É–µ—Ç—ã.\n\n–í–æ–∑–≥–ª–∞–≤—å –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–µ –±–µ–∑—É–º–∏–µ –∏ —Å—Ç–∞–Ω—å –¥—É—à–æ–π —ç—Ç–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ ‚ú®",
            reply_markup=reply_markup)

    return INFORMATION_TEXT


def restart(update, context):
    if update.message:
        update.message.reply_text("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
    else:
        update.callback_query.message.reply_text("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
    context.user_data.clear()
    return start(update, context)


def information_text(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    last_info = query.data
    if last_info == "next_info":
        keyboard = [
            [InlineKeyboardButton("–ö—Ä—É—Ç–æ! –ü–æ–≥–Ω–∞–ª–∏!", callback_data="next_info_2")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update.callback_query.message.reply_text(
            "–ü–æ–∫–∞ –≤—Å–µ –±—É–¥—É—Ç —Å–æ–±–∏—Ä–∞—Ç—å—Å—è –≤ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø–µ –∏ –¥—É–º–∞—Ç—å, —á—Ç–æ –æ–Ω–∏ —Ö–æ—Ç—è—Ç –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —Å–≤–æ–µ–≥–æ –°–∞–Ω—Ç—ã, "
            "—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–º–æ–≥—É—Ç –ø–æ–∏–≥—Ä–∞—Ç—å –≤ —Å–Ω–µ–∂–∫–∏ ‚òÑÔ∏è (–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –±—É–¥–µ—Ç –≤ –º–µ–Ω—é [–ú–æ–∏ –≥—Ä—É–ø–ø—ã]) –∏ "
            "–ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –º–æ–∏–º —à—É—Ç–∫–∞–º.\n\n"
            "–ö–æ–≥–¥–∞ –≤—Å–µ —Å–æ–±–µ—Ä—É—Ç—Å—è, —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ —è –ø–æ–¥–±–µ—Ä—É –∏ —Ä–∞–∑–æ—à–ª—é –∫–∞–∂–¥–æ–º—É –µ–≥–æ "
            "–ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ ü•∑\n\n–°–∞–Ω—Ç–∞ –∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–π –¥–∞–∂–µ —Å–º–æ–≥—É—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞—Ö–æ—Ç—è—Ç —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ "
            "–∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∏–≤–µ—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É.",
            reply_markup=reply_markup)

    return INFORMATION_TEXT_2


def information_text_2(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    last_info = query.data
    if last_info == "next_info_2":
        keyboard = [
            [KeyboardButton(CREATE_GROUP_BTN_TXT)],
            [KeyboardButton(ADMIN_BTN_TXT)],
            [KeyboardButton(MY_GROUPS_BTN_TXT)],
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        update.callback_query.message.reply_text(
            "–ö–æ–≥–¥–∞ —Ç—ã —Å–æ–∑–¥–∞—à—å –≥—Ä—É–ø–ø—É, —è —Å–¥–µ–ª–∞—é –¥–ª—è —Ç–µ–±—è –≤–æ–ª—à–µ–±–Ω—É—é —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Å—Å—ã–ª–∫—É. –ü—Ä–æ–π–¥—è –ø–æ –Ω–µ–π, —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è —Å—Ä–∞–∑—É "
            "–Ω–∞—á–Ω—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø–µ."
            "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n\n–ï—â–µ —è —Å–æ–∑–¥–∞–ª –¥–ª—è —Ç–µ–±—è –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∏, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å:\n\n1Ô∏è‚É£ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, "
            "–≤ –∫–∞–∫–∏—Ö –≥—Ä—É–ø–ø–∞—Ö —Ç—ã —Å–æ—Å—Ç–æ–∏—à—å\n\n2Ô∏è‚É£ –£–ø—Ä–∞–≤–ª—è—Ç—å —Ç–≤–æ–∏–º–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏\n\n3Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É "
            "/newgroup\n–•–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã! ü•≥",
            reply_markup=reply_markup)
    return BUTTON_HANDLING


def button_handling(update: Update, context: CallbackContext):
    message_text = update.message.text
    if message_text == CREATE_GROUP_BTN_TXT:
        return create_group(update, context)
    elif message_text == MY_GROUPS_BTN_TXT:
        return my_groups(update, context)
    elif message_text == ADMIN_BTN_TXT:
        return admin(update, context)


# –í–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
def create_group(update: Update, context: CallbackContext):
    message_text = "–°–∞–º–æ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É, –∫—É–¥–∞ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –∫–æ–ª–ª–µ–≥ –∏–ª–∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤\n\n" \
           "–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –∑–∞–±–∞–≤–Ω–æ–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã!"
    update.message.reply_text(message_text)
    return DESCRIPTION_GROUP


def description_group(update: Update, context: CallbackContext):
    context.user_data["goupe_name"] = update.message.text
    message_text = "–ö–ª–∞—Å—Å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!\n\n" \
                   "–ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –º–Ω–µ –∫–æ—Ä–æ—Ç–∫–æ–µ  –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã. –ï–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≥—Ä—É–ø–ø—ã."
    update.message.reply_text(message_text)
    return CHOOSE_DATE


def choose_date(update: Update, context: CallbackContext):
    pass


# –í–µ—Ç–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä—É–ø–ø
def my_groups(update: Update, context: CallbackContext):
    groups = ["–î–æ—Å—Ç–∞–µ–º", "–≥—Ä—É–ø–ø—ã", "–∏–∑ –ë–î"]
    group_names = "\n".join(groups)
    message_text = f"–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –≥–¥–µ —Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫:\n{group_names}\n"
    keyboard = [
        [InlineKeyboardButton(text=group, callback_data=group)
         for group in groups]
    ]
    update.message.reply_text(text=message_text,
                              reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOSEN_GROUP


def display_about_group(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    group_name = query.data
    # –î–æ—Å—Ç–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –±–¥ –ø–æ –∏–º–µ–Ω–∏ (–≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–º–µ—Ä–∞ —Ç—É—Ç —Å–ª–æ–≤–∞—Ä—å)
    group = {
        "name": group_name,
        "description": "–ö—É—á–∞ —Ç–µ–∫—Å—Ç–∞",
        "registration_status": "–û—Ç–∫—Ä—ã—Ç–∞",
        "amount_playing_users": 6,
        "players": ['–ò–≥—Ä–æ–∫ 1', '–ò–≥—Ä–æ–∫ 2', '–ò–≥—Ä–æ–∫ 3', '–ò–≥—Ä–æ–∫ 4'],
        "present_for": "–ò–≥—Ä–æ–∫ 4"
    }

    text = "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {}\n\n"  \
           "–û–ø–∏—Å–∞–Ω–∏–µ:\n{}\n\n"  \
           "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –≥—Ä—É–ø–ø—É {}\n\n"  \
           "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—á–µ—Ä–µ–∑ annotate) - {}\n"  \
           "{}\n\n"  \
           "–¢—ã –±—É–¥–µ—à—å —Ç–∞–π–Ω—ã–º –°–∞–Ω—Ç–æ–π –¥–ª—è {}\n"

    message_text = text.format(group['name'],
                               group['description'],
                               group['registration_status'],
                               group['amount_playing_users'],
                               "\n".join(group['players']),
                               group['present_for'])
    keyboard = [
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                              callback_data="–ù–∞–∑–∞–¥")],
        [InlineKeyboardButton(text="–ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É",
                              callback_data="–ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ",
                              callback_data="–ò–∑–º–µ–Ω–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ")]
    ]
    update.callback_query.message.reply_text(
        text=message_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


def leave_group(update: Update, context: CallbackContext):
    pass


# –í–µ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏
def admin(update: Update, context: CallbackContext):
    pass
