from telegram import (InlineKeyboardButton, InlineKeyboardMarkup,
                      InputMediaPhoto, KeyboardButton, ReplyKeyboardMarkup,
                      Update)
from telegram.ext import CallbackContext, ConversationHandler

from santa_bot.bot.texts import (ADMIN_BTN_TXT, CREATE_GROUP_BTN_TXT,
                                 MY_GROUPS_BTN_TXT)
from santa_bot.models import Game, Player

NAME, EMAIL, WISHLIST, CONFIRM, EDITING_HANDLING, CHECK_CORRECT, EDIT_RESPONSE = range(7)
INFORMATION_TEXT, INFORMATION_TEXT_2 = range(2)
CREATE_GROUP, DESCRIPTION_GROUP, CHOOSE_DATE = range(3)
CHOSEN_GROUP, IN_GROUP_ACTION, CHANGE_WISHLIST = range(3)


def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–Ø –≥–æ—Ç–æ–≤!", callback_data="next_info")],

    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        # update.message.photo()
        update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-–ø–æ–≤–µ–ª–∏—Ç–µ–ª—å –¢–∞–π–Ω—ã—Ö –°–∞–Ω—Ç. –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω–∞ —Å–≤–µ—Ç–µ —è –ª—é–±–ª—é –¥—Ä—É–∑–µ–π –∏ –ø–æ–¥–∞—Ä–∫–∏ üéÅ")
        update.message.reply_text(
            "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É —Å –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ —Å–µ–º—å–µ–π üë®‚Äçüë©‚Äçüëß‚Äçüë¶, –Ω–∞ —Ä–∞–±–æ—Ç–µ üë©‚Äç‚úàÔ∏è–∏–ª–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ üßò, –≤–µ–∑–¥–µ, –≥–¥–µ –µ—Å—Ç—å –¥–æ—Ä–æ–≥–∏–µ —Ç–µ–±–µ –ª—é–¥–∏, —Å –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ä–∞–¥–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–π —Å—É–µ—Ç—ã.\n\n–í–æ–∑–≥–ª–∞–≤—å –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–µ –±–µ–∑—É–º–∏–µ –∏ —Å—Ç–∞–Ω—å –¥—É—à–æ–π —ç—Ç–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ ‚ú®",
            reply_markup=reply_markup)

    return INFORMATION_TEXT


def restart(update, context):
    if update.message:
        update.message.reply_text("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
    else:
        update.callback_query.message.reply_text("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
    context.user_data.clear()
    return start(update, context)


def information_text(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    last_info = query.data
    if last_info == "next_info":
        keyboard = [
            [InlineKeyboardButton("–ö—Ä—É—Ç–æ! –ü–æ–≥–Ω–∞–ª–∏!", callback_data="next_info_2")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update.callback_query.message.reply_text(
            "–ü–æ–∫–∞ –≤—Å–µ –±—É–¥—É—Ç —Å–æ–±–∏—Ä–∞—Ç—å—Å—è –≤ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø–µ –∏ –¥—É–º–∞—Ç—å, —á—Ç–æ –æ–Ω–∏ —Ö–æ—Ç—è—Ç –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —Å–≤–æ–µ–≥–æ –°–∞–Ω—Ç—ã, "
            "—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–º–æ–≥—É—Ç –ø–æ–∏–≥—Ä–∞—Ç—å –≤ —Å–Ω–µ–∂–∫–∏ ‚òÑÔ∏è (–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –±—É–¥–µ—Ç –≤ –º–µ–Ω—é [–ú–æ–∏ –≥—Ä—É–ø–ø—ã]) –∏ "
            "–ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –º–æ–∏–º —à—É—Ç–∫–∞–º.\n\n"
            "–ö–æ–≥–¥–∞ –≤—Å–µ —Å–æ–±–µ—Ä—É—Ç—Å—è, —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ —è –ø–æ–¥–±–µ—Ä—É –∏ —Ä–∞–∑–æ—à–ª—é –∫–∞–∂–¥–æ–º—É –µ–≥–æ "
            "–ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ ü•∑\n\n–°–∞–Ω—Ç–∞ –∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–π –¥–∞–∂–µ —Å–º–æ–≥—É—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞—Ö–æ—Ç—è—Ç —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ "
            "–∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∏–≤–µ—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É.",
            reply_markup=reply_markup)

    return INFORMATION_TEXT_2


def information_text_2(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    last_info = query.data
    if last_info == "next_info_2":
        keyboard = [
            [KeyboardButton(CREATE_GROUP_BTN_TXT)],
            [KeyboardButton(ADMIN_BTN_TXT)],
            [KeyboardButton(MY_GROUPS_BTN_TXT)],
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        update.callback_query.message.reply_text(
            "–ö–æ–≥–¥–∞ —Ç—ã —Å–æ–∑–¥–∞—à—å –≥—Ä—É–ø–ø—É, —è —Å–¥–µ–ª–∞—é –¥–ª—è —Ç–µ–±—è –≤–æ–ª—à–µ–±–Ω—É—é —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Å—Å—ã–ª–∫—É. –ü—Ä–æ–π–¥—è –ø–æ –Ω–µ–π, —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è —Å—Ä–∞–∑—É "
            "–Ω–∞—á–Ω—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø–µ."
            "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n\n–ï—â–µ —è —Å–æ–∑–¥–∞–ª –¥–ª—è —Ç–µ–±—è –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∏, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å:\n\n1Ô∏è‚É£ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, "
            "–≤ –∫–∞–∫–∏—Ö –≥—Ä—É–ø–ø–∞—Ö —Ç—ã —Å–æ—Å—Ç–æ–∏—à—å\n\n2Ô∏è‚É£ –£–ø—Ä–∞–≤–ª—è—Ç—å —Ç–≤–æ–∏–º–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏\n\n3Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É "
            "/newgroup\n–•–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã! ü•≥",
            reply_markup=reply_markup)


# –í–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
def create_group(update: Update, context: CallbackContext):
    message_text = "–°–∞–º–æ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É, –∫—É–¥–∞ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –∫–æ–ª–ª–µ–≥ –∏–ª–∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤\n\n" \
           "–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –∑–∞–±–∞–≤–Ω–æ–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã!"
    update.message.reply_text(message_text)
    return DESCRIPTION_GROUP


def description_group(update: Update, context: CallbackContext):
    context.user_data["group_name"] = update.message.text
    message_text = "–ö–ª–∞—Å—Å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!\n\n" \
                   "–ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –º–Ω–µ –∫–æ—Ä–æ—Ç–∫–æ–µ  –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã. –ï–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≥—Ä—É–ø–ø—ã."
    update.message.reply_text(message_text)
    return CHOOSE_DATE


def choose_date(update: Update, context: CallbackContext):
    pass


# –í–µ—Ç–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä—É–ø–ø
def my_groups(update: Update, context: CallbackContext):
    groups = ["–î–æ—Å—Ç–∞–µ–º", "–≥—Ä—É–ø–ø—ã", "–∏–∑ –ë–î"]
    message_text = f"–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –≥–¥–µ —Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫:\n{', '.join(groups)}\n"
    keyboard = [
        [InlineKeyboardButton(text=group, callback_data=group)] for group in groups
    ]
    print(keyboard)
    update.message.reply_text(text=message_text,
                              reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOSEN_GROUP


def display_about_group(update: Update, context: CallbackContext):
    print('display_about_group')
    query = update.callback_query
    query.answer()
    group_name = query.data
    group = {
        "name": group_name,
        "description": "–ö—É—á–∞ —Ç–µ–∫—Å—Ç–∞",
        "registration_status": "–û—Ç–∫—Ä—ã—Ç–∞",
        "amount_playing_users": 6,
        "players": ['–ò–≥—Ä–æ–∫ 1', '–ò–≥—Ä–æ–∫ 2', '–ò–≥—Ä–æ–∫ 3', '–ò–≥—Ä–æ–∫ 4'],
        "present_for": "–ò–≥—Ä–æ–∫ 4"
    }

    text = "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {}\n\n"  \
           "–û–ø–∏—Å–∞–Ω–∏–µ:\n{}\n\n"  \
           "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –≥—Ä—É–ø–ø—É {}\n\n"  \
           "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—á–µ—Ä–µ–∑ annotate) - {}\n"  \
           "{}\n\n"  \
           "–¢—ã –±—É–¥–µ—à—å —Ç–∞–π–Ω—ã–º –°–∞–Ω—Ç–æ–π –¥–ª—è {}\n"

    message_text = text.format(group['name'],
                               group['description'],
                               group['registration_status'],
                               group['amount_playing_users'],
                               group['players'],
                               group['present_for'])

    keyboard = [
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                              callback_data="–ù–∞–∑–∞–¥")],
        [InlineKeyboardButton(text="–ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É",
                              callback_data="–ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ",
                              callback_data="–ò–∑–º–µ–Ω–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ")]
    ]
    query.message.reply_text(
        text=message_text, reply_markup=InlineKeyboardMarkup(keyboard))
    return IN_GROUP_ACTION


def in_group_action(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == '–ù–∞–∑–∞–¥':
        return CHOSEN_GROUP
    elif query.data == '–ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É':
        print('–í—ã–π—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø—É')
        return ConversationHandler.END
    elif query.data == '–ò–∑–º–µ–Ω–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ':
        query.message.reply_text('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—å–∞ –∑–∞–Ω–æ–≤–æ –≤–∏—à–ª–∏—Å—Ç')
        return CHANGE_WISHLIST


# –í–µ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏
def admin(update: Update, context: CallbackContext):
    pass


# –í–µ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
def start_player(update: Update, context: CallbackContext):
    """Reached through deep-link with game ID."""
    game_id = context.args[0]
    game = Game.objects.get(id=game_id)
    message_text = f"""–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, —Ç—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–µ: {game.name}
–ò–≥—Ä–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å {game.start_date} –ø–æ {game.end_date}.
–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:
{game.description}"""
    update.message.reply_text(message_text)
    update.message.reply_text(
        """–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞–∂–∏, –∫–∞–∫ –∫ —Ç–µ–±–µ –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?
–ù–∞–ø–∏—à–∏ —Ç–∞–∫, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥–ª–∏ —Ç–µ–±—è —É–∑–Ω–∞—Ç—å"""
    )
    context.user_data["current_game"] = game
    return NAME


def get_name(update: Update, context: CallbackContext):
    """Collect player's name from text message and ask for email."""
    context.user_data["name"] = update.message.text
    message_text = "–°–ª–∞–≤–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π email"
    update.message.reply_text(message_text)

    return EMAIL


def get_email(update: Update, context: CallbackContext):
    """Collect player's email and ask for their wishlist."""
    context.user_data["email"] = update.message.text
    game = context.user_data["current_game"]
    message_text = f"""–ê —Å–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –≤ –ø–æ–¥–∞—Ä–æ–∫ :)
–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏–ª–∏ –∂–µ –ø—Ä–æ—Å—Ç–æ —á—Ç–æ —Ç–µ–±–µ –±—ã–ª–æ –±—ã –ø–æ –¥—É—à–µ

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ø–æ–¥–∞—Ä–∫–∞–º: {game.price_limit}"""
    update.message.reply_text(message_text)

    return WISHLIST


def get_wishlist(update: Update, context: CallbackContext):
    """Collect player's wishlist."""
    context.user_data["wishlist"] = update.message.text
    return check_if_correct(update, context)


def check_if_correct(update: Update, context: CallbackContext):
    """Show summary of the player's info to confirm or edit."""
    wishlist = context.user_data["wishlist"]
    name = context.user_data["name"]
    email = context.user_data["email"]

    message_text = f"""–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤—Å—ë –≤–µ—Ä–Ω–æ:
–ò–º—è: {name}
Email: {email}
–¢–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è: {wishlist}

–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"""

    keyboard = [
        [InlineKeyboardButton("–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", callback_data="participation_correct")],
        [InlineKeyboardButton("–ù–µ—Ç, —Ö–æ—á—É —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å", callback_data="edit_participation")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        update.message.reply_text(message_text, reply_markup=reply_markup)
    elif update.callback_query:
        update.callback_query.answer()
        update.callback_query.message.reply_text(message_text, reply_markup=reply_markup)

    return CONFIRM


def confirm_participation(update: Update, context: CallbackContext):
    """Create correct Player entry in db or select field to edit."""
    query = update.callback_query
    query.answer()
    if query.data == "participation_correct":
        game = context.user_data["current_game"]
        wishlist = context.user_data["wishlist"]
        name = context.user_data["name"]
        email = context.user_data["email"]

        Player.objects.create(
            telegram_id=update.effective_user.id,
            game=game,
            name=name,
            email=email,
            wishlist=wishlist
        )
        message_text = f"""–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ, —Ç—ã –≤ –∏–≥—Ä–µ! \
{game.end_date} –º—ã –ø—Ä–æ–≤–µ–¥–µ–º –∂–µ—Ä–µ–±—å–µ–≤–∫—É –∏ —Ç—ã —É–∑–Ω–∞–µ—à—å –∏–º—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–≤–æ–µ–≥–æ —Ç–∞–π–Ω–æ–≥–æ –¥—Ä—É–≥–∞. \
–ï–º—É –∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫!"""
        query.message.reply_text(message_text)
        return ConversationHandler.END
    elif query.data == "edit_participation":
        message_text = "–û–∫–µ–π, —á—Ç–æ –Ω–∞–¥–æ –∏–∑–º–µ–Ω–∏—Ç—å?"
        keyboard = [
            [
                InlineKeyboardButton("–ò–º—è", callback_data="edit_name"),
                InlineKeyboardButton("Email", callback_data="edit_email"),
                InlineKeyboardButton("–ü–æ–∂–µ–ª–∞–Ω–∏—è", callback_data="edit_wishlist")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(message_text, reply_markup=reply_markup)
        return EDITING_HANDLING


def handle_participation_editing(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data == "edit_name":
        message_text = "–ù–∞–ø–∏—à–∏, –∫–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è (—á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ —Ç–µ–±—è –º–æ–≥–ª–∏ —É–∑–Ω–∞—Ç—å)"
        context.user_data["now_editing"] = "name"
    elif query.data == "edit_email":
        message_text = "–ù–∞–ø–∏—à–∏, —Å–≤–æ–π email"
        context.user_data["now_editing"] = "email"
    elif query.data == "edit_wishlist":
        message_text = "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –≤ –ø–æ–¥–∞—Ä–æ–∫"
        context.user_data["now_editing"] = "wishlist"

    query.message.reply_text(message_text)
    return EDIT_RESPONSE


def get_edited_response(update: Update, context: CallbackContext):
    key_to_edit = context.user_data.pop("now_editing")
    context.user_data[key_to_edit] = update.message.text

    return check_if_correct(update, context)

def get_edited_response(update: Update, context: CallbackContext):
    key_to_edit = context.user_data.pop("now_editing")
    context.user_data[key_to_edit] = update.message.text

    return check_if_correct(update, context)
def get_edited_response(update: Update, context: CallbackContext):
    key_to_edit = context.user_data.pop("now_editing")
    context.user_data[key_to_edit] = update.message.text

    return check_if_correct(update, context)
